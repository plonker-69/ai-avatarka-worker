name: CI - Test Handler

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-handler:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install additional packages for testing
        pip install pytest black flake8 pillow requests aiofiles
        
    - name: Validate project structure
      run: |
        echo "🔍 Checking project structure..."
        
        required_files=(
          "src/handler.py"
          "requirements.txt"
          "Dockerfile"
          "prompts/effects.json"
          "workflow/universal_i2v.json"
          "builder/download_models.py"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        
    - name: Validate configurations
      run: |
        echo "🎭 Validating configurations..."
        python -c "
        import json
        
        # Load effects config
        with open('prompts/effects.json', 'r') as f:
            effects = json.load(f)
        
        # Check structure
        assert 'effects' in effects, 'Missing effects key'
        assert 'default_settings' in effects, 'Missing default_settings key'
        
        # Check each effect
        required_fields = ['lora', 'prompt', 'negative_prompt', 'lora_strength']
        effect_count = 0
        
        for name, config in effects['effects'].items():
            effect_count += 1
            for field in required_fields:
                assert field in config, f'Effect {name} missing {field}'
            
            assert config['lora'].endswith('.safetensors'), f'Invalid LoRA filename for {name}'
            assert len(config['prompt'].strip()) > 10, f'Prompt too short for {name}'
            
            print(f'✅ Effect validated: {name}')
        
        print(f'✅ All {effect_count} effects validated successfully!')
        "
        
    - name: Test handler imports
      run: |
        echo "📦 Testing handler imports..."
        python -c "
        import sys
        sys.path.append('src')
        
        try:
            from handler import (
                load_effects_config,
                process_input_image, 
                customize_workflow,
                encode_video_to_base64
            )
            print('✅ All handler functions imported successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "
        
    - name: Summary
      run: |
        echo "🎉 All tests passed! Handler is ready for deployment."