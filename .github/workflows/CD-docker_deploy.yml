name: CD - Build & Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Pre-build validation
      run: |
        echo "🔍 Pre-build validation for AI-Avatarka..."
        
        # Validate JSON configurations
        python -c "
        import json
        
        with open('prompts/effects.json') as f:
            effects = json.load(f)
        print('✅ effects.json is valid')
        
        with open('workflow/universal_i2v.json') as f:
            workflow = json.load(f)
        print('✅ universal_i2v.json is valid')
        
        # Check LoRA configurations
        with open('builder/download_models.py') as f:
            content = f.read()
            if 'YOUR_' in content and 'GDRIVE_ID' in content:
                print('⚠️  Warning: Found placeholder Google Drive IDs')
            else:
                print('✅ Google Drive IDs appear configured')
        "
        
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
          
    - name: Test Docker image
      run: |
        echo "🧪 Testing built Docker image..."
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
        
        timeout 300 docker run --rm $IMAGE_TAG python -c "
        import sys, os
        
        try:
            import torch
            print(f'✅ PyTorch {torch.__version__} available')
        except ImportError as e:
            print(f'❌ PyTorch missing: {e}')
            sys.exit(1)
        
        try:
            import runpod
            print('✅ RunPod SDK available')
        except ImportError as e:
            print(f'❌ RunPod missing: {e}')
            sys.exit(1)
        
        sys.path.append('/workspace')
        try:
            import handler
            print('✅ Handler imports successfully')
        except ImportError as e:
            print(f'❌ Handler import failed: {e}')
            sys.exit(1)
        
        print('✅ Docker image test passed')
        "
        
    - name: Generate deployment summary
      run: |
        echo "## 🚀 AI-Avatarka Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Container Image:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | head -1 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 RunPod Setup" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to RunPod Serverless" >> $GITHUB_STEP_SUMMARY
        echo "2. Create new endpoint" >> $GITHUB_STEP_SUMMARY
        echo "3. Use the container image above" >> $GITHUB_STEP_SUMMARY
        echo "4. Upload worker-config.json" >> $GITHUB_STEP_SUMMARY
        echo "5. Test with sample input!" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'