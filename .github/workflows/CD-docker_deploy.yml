name: CD - Build & Deploy (Optimized)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check initial disk space
      run: |
        echo "📊 Initial disk space:"
        df -h
        echo "📦 Largest directories:"
        sudo du -h /usr/ | sort -hr | head -10 || true
        
    - name: Free up disk space
      uses: jlumbroso/free-disk-space@main
      with:
        # Delete tool cache and large packages
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
        
    - name: Check disk space after cleanup
      run: |
        echo "🎯 Disk space after cleanup:"
        df -h
        echo "📈 Available space: $(df -h / | awk 'NR==2{print $4}')"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host
        buildkitd-flags: |
          --allow-insecure-entitlement security.insecure
          --allow-insecure-entitlement network.host
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Pre-build validation
      run: |
        echo "🔍 Pre-build validation for AI-Avatarka..."
        
        # Validate JSON configurations
        python -c "
        import json
        
        try:
            with open('prompts/effects.json') as f:
                effects = json.load(f)
            print('✅ effects.json is valid')
        except FileNotFoundError:
            print('⚠️  effects.json not found - will use defaults')
        
        try:
            with open('workflow/universal_i2v.json') as f:
                workflow = json.load(f)
            print('✅ universal_i2v.json is valid')
        except FileNotFoundError:
            print('⚠️  workflow not found - will use defaults')
        
        # Check LoRA configurations
        try:
            with open('builder/download_models.py') as f:
                content = f.read()
                if 'YOUR_' in content and 'GDRIVE_ID' in content:
                    print('⚠️  Warning: Found placeholder Google Drive IDs')
                else:
                    print('✅ Google Drive IDs appear configured')
        except FileNotFoundError:
            print('⚠️  download_models.py not found')
        "
        
    - name: Monitor disk space during build
      run: |
        echo "📊 Disk space before Docker build:"
        df -h
        
        # Start background monitoring
        (
          while true; do
            sleep 60
            echo "⏰ $(date): $(df -h / | awk 'NR==2{print "Available: " $4 ", Used: " $5}')"
          done
        ) &
        MONITOR_PID=$!
        
        # Store PID for cleanup
        echo $MONITOR_PID > /tmp/monitor.pid
        
    - name: Build and push Docker image (Space Optimized)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Aggressive caching and optimization
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
        # Space optimization
        provenance: false
        sbom: false
        outputs: type=registry,compression=gzip,compression-level=9
        # Use inline cache to reduce space usage
        cache-to: type=inline,mode=max
        # Remove intermediate layers aggressively
        no-cache: false
          
    - name: Clean up build cache and monitoring
      if: always()
      run: |
        # Stop monitoring
        if [ -f /tmp/monitor.pid ]; then
          kill $(cat /tmp/monitor.pid) || true
          rm /tmp/monitor.pid
        fi
        
        echo "🧹 Final cleanup..."
        docker system prune -af --volumes || true
        docker builder prune -af || true
        
        echo "📊 Final disk usage:"
        df -h
        
    - name: Test Docker image (lightweight)
      run: |
        echo "🧪 Quick Docker image test..."
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
        
        # Just test that image exists and basic structure
        docker pull $IMAGE_TAG
        docker run --rm --entrypoint="" $IMAGE_TAG ls -la /workspace/ || true
        docker run --rm --entrypoint="" $IMAGE_TAG python -c "print('✅ Container runs successfully')"
        
        echo "✅ Basic Docker image test passed"
        
    - name: Generate deployment summary
      run: |
        echo "## 🚀 AI-Avatarka Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Container Image:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | head -1 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Info" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform:** \`linux/amd64\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 RunPod Setup" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to RunPod Serverless" >> $GITHUB_STEP_SUMMARY
        echo "2. Create new endpoint" >> $GITHUB_STEP_SUMMARY
        echo "3. Use the container image above" >> $GITHUB_STEP_SUMMARY
        echo "4. Upload worker-config.json" >> $GITHUB_STEP_SUMMARY
        echo "5. Test with sample input!" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success()
    steps:
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities, just report
        
  deploy-notification:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: success() && github.ref == 'refs/heads/main'
    steps:
    - name: Notify successful deployment
      run: |
        echo "🎉 AI-Avatarka deployment completed successfully!"
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Ready for RunPod serverless deployment!"