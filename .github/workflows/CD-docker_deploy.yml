name: CD - Build with Pre-Downloaded Models

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Model URLs like hearmeman's buildspec.yml
  WAN_I2V: https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/diffusion_models/wan2.1_i2v_480p_14B_bf16.safetensors
  WAN_VAE: https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/vae/wan_2.1_vae.safetensors
  WAN_TEXT: https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/text_encoders/umt5_xxl_fp8_e4m3fn_scaled.safetensors
  WAN_CLIP: https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/clip_vision/clip_vision_h.safetensors

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Maximize disk space (aggressive cleanup)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
        
    - name: Check available space after cleanup
      run: |
        echo "📊 Available space after cleanup:"
        df -h /
        echo "Available space: $(df -h / | awk 'NR==2{print $4}')"
      
    - name: Pre-download models (hearmeman approach)
      run: |
        echo "⬇️  Pre-downloading Wan 2.1 models like hearmeman's buildspec.yml"
        mkdir -p models/diffusion_models models/vae models/text_encoders models/clip_vision
        
        # Download main model
        echo "Downloading I2V model..."
        wget --progress=dot:giga -O "models/diffusion_models/wan2.1_i2v_480p_14B_bf16.safetensors" "$WAN_I2V" &
        PID1=$!
        
        # Download smaller models in parallel
        echo "Downloading VAE..."
        wget --progress=dot:giga -O "models/vae/wan_2.1_vae.safetensors" "$WAN_VAE" &
        PID2=$!
        
        echo "Downloading text encoder..."
        wget --progress=dot:giga -O "models/text_encoders/umt5_xxl_fp8_e4m3fn_scaled.safetensors" "$WAN_TEXT" &
        PID3=$!
        
        echo "Downloading CLIP vision..."
        wget --progress=dot:giga -O "models/clip_vision/clip_vision_h.safetensors" "$WAN_CLIP" &
        PID4=$!
        
        # Wait for all downloads to complete
        wait $PID1 $PID2 $PID3 $PID4
        
        echo "📦 Model download summary:"
        ls -lh models/diffusion_models/
        ls -lh models/vae/
        ls -lh models/text_encoders/
        ls -lh models/clip_vision/
        
        echo "💾 Total model size:"
        du -sh models/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Create optimized Dockerfile
      run: |
        cat > Dockerfile.optimized << 'EOF'
        # Optimized build using pre-downloaded models
        FROM hearmeman/comfyui-wan-template:v2
        
        ENV DEBIAN_FRONTEND=noninteractive \
            PIP_PREFER_BINARY=1 \
            PYTHONUNBUFFERED=1 \
            COMFYUI_PATH="/workspace/ComfyUI"
        
        # Install minimal dependencies
        RUN pip install --no-cache-dir runpod~=1.7.9 gdown>=5.0.0
        
        # Copy project files
        COPY workflow/ /workspace/ComfyUI/workflow/
        COPY prompts/ /workspace/prompts/
        COPY src/handler.py /handler.py
        
        # Create model directories
        RUN mkdir -p /workspace/ComfyUI/models/diffusion_models \
                     /workspace/ComfyUI/models/vae \
                     /workspace/ComfyUI/models/text_encoders \
                     /workspace/ComfyUI/models/clip_vision \
                     /workspace/ComfyUI/models/loras
        
        # Copy pre-downloaded models
        COPY models/ /workspace/ComfyUI/models/
        
        # Copy LoRA files
        COPY lora/ /workspace/ComfyUI/models/loras/
        
        # Download LoRA files if needed
        COPY builder/ /builder/
        RUN python /builder/download_models.py && rm -rf /builder/
        
        WORKDIR /workspace
        CMD ["python", "-u", "/handler.py"]
        EOF
        
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.optimized
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Optimize for space
        provenance: false
        sbom: false
        
    - name: Clean up downloaded models
      if: always()
      run: |
        echo "🧹 Cleaning up pre-downloaded models..."
        rm -rf models/
        docker system prune -af || true
        
    - name: Test built image
      run: |
        echo "🧪 Testing built image..."
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
        
        # Quick test that models are present
        docker run --rm --entrypoint="" $IMAGE_TAG bash -c "
        echo '📦 Checking models are present...'
        ls -la /workspace/ComfyUI/models/diffusion_models/
        ls -la /workspace/ComfyUI/models/vae/
        ls -la /workspace/ComfyUI/models/text_encoders/
        ls -la /workspace/ComfyUI/models/clip_vision/
        echo '✅ Models check complete'
        "
        
    - name: Generate deployment summary
      run: |
        echo "## 🚀 AI-Avatarka Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Built using hearmeman-inspired pre-download strategy**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Container Image:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | head -1 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 RunPod Setup" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to RunPod Serverless" >> $GITHUB_STEP_SUMMARY
        echo "2. Create new endpoint" >> $GITHUB_STEP_SUMMARY
        echo "3. Use the container image above" >> $GITHUB_STEP_SUMMARY
        echo "4. Upload worker-config.json" >> $GITHUB_STEP_SUMMARY
        echo "5. Test with sample input!" >> $GITHUB_STEP_SUMMARY