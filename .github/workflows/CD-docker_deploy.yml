name: CD - Ultra Space Optimized

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Maximize disk space (ultra aggressive)
      run: |
        echo "ðŸ§¹ Ultra aggressive cleanup..."
        
        # Show initial space
        echo "ðŸ“Š Initial space:"
        df -h /
        
        # Remove massive directories first
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/lib/node_modules
        sudo rm -rf /opt/az
        sudo rm -rf /usr/local/lib/heroku
        sudo rm -rf /home/linuxbrew
        sudo rm -rf /usr/local/graalvm
        sudo rm -rf /usr/local/sqlpackage
        
        # Remove language toolchains
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk
        sudo rm -rf /opt/hostedtoolcache/Python
        sudo rm -rf /opt/hostedtoolcache/PyPy
        sudo rm -rf /opt/hostedtoolcache/node
        sudo rm -rf /opt/hostedtoolcache/go
        sudo rm -rf /opt/hostedtoolcache/Ruby
        
        # Clean package caches
        sudo apt-get clean
        sudo apt-get autoremove -y
        sudo apt-get autoclean
        
        # Clean Docker aggressively
        docker system prune -af --volumes
        
        # Clean logs and temp files
        sudo rm -rf /var/log/*
        sudo rm -rf /tmp/*
        sudo rm -rf /var/tmp/*
        sudo rm -rf ~/.cache
        
        # Show space after cleanup
        echo "ðŸ“Š Space after cleanup:"
        df -h /
        
    - name: Checkout repository (minimal)
      uses: actions/checkout@v4
      with:
        # Shallow clone to save space
        fetch-depth: 1
        
    - name: Create minimal required directories
      run: |
        mkdir -p lora
        touch lora/.gitkeep
        
    - name: Set up Docker Buildx (minimal config)
      uses: docker/setup-buildx-action@v3
      with:
        config-inline: |
          [worker.oci]
            gc = true
            gckeepstorage = 1000
            
    - name: Log in to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check space before build
      run: |
        echo "ðŸ“Š Available space before build:"
        df -h /
        echo "Free space: $(df / | tail -1 | awk '{print $4}')"
        
    - name: Build and push (no cache to save space)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        # Disable cache to save space
        no-cache: true
        # Remove build cache after
        rm: true
        # Extended timeout
        timeout-minutes: 120
        
    - name: Final cleanup
      if: always()
      run: |
        echo "ðŸ§¹ Final cleanup..."
        docker system prune -af --volumes || true
        
    - name: Generate summary
      if: success()
      run: |
        echo "## ðŸš€ Build Success!" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY