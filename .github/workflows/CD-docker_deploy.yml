name: CD - Build & Deploy (Optimized)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        echo "🧹 Freeing up disk space..."
        
        # Show initial disk usage
        df -h
        
        # Remove unnecessary packages and files
        sudo apt-get remove -y \
          '^dotnet-.*' \
          '^llvm-.*' \
          'php.*' \
          '^mongodb-.*' \
          '^mysql-.*' \
          azure-cli \
          google-cloud-sdk \
          hhvm \
          google-chrome-stable \
          firefox \
          powershell \
          mono-devel \
          libgl1-mesa-dri
        
        # Clean package cache
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        # Remove large directories
        sudo rm -rf /usr/share/dotnet/
        sudo rm -rf /usr/local/lib/android/
        sudo rm -rf /opt/ghc/
        sudo rm -rf /opt/hostedtoolcache/CodeQL/
        sudo rm -rf /usr/local/share/boost/
        sudo rm -rf /usr/lib/jvm/
        sudo rm -rf /usr/share/swift/
        
        # Clear Docker system cache
        docker system prune -af || true
        
        # Show disk usage after cleanup
        echo "🎯 Disk space after cleanup:"
        df -h
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host
        buildkitd-flags: |
          --allow-insecure-entitlement security.insecure
          --allow-insecure-entitlement network.host
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Pre-build validation
      run: |
        echo "🔍 Pre-build validation for AI-Avatarka..."
        
        # Validate JSON configurations
        python -c "
        import json
        
        try:
            with open('prompts/effects.json') as f:
                effects = json.load(f)
            print('✅ effects.json is valid')
        except FileNotFoundError:
            print('⚠️  effects.json not found - will use defaults')
        
        try:
            with open('workflow/universal_i2v.json') as f:
                workflow = json.load(f)
            print('✅ universal_i2v.json is valid')
        except FileNotFoundError:
            print('⚠️  workflow not found - will use defaults')
        
        # Check LoRA configurations
        try:
            with open('builder/download_models.py') as f:
                content = f.read()
                if 'YOUR_' in content and 'GDRIVE_ID' in content:
                    print('⚠️  Warning: Found placeholder Google Drive IDs')
                else:
                    print('✅ Google Drive IDs appear configured')
        except FileNotFoundError:
            print('⚠️  download_models.py not found')
        "
        
    - name: Build and push Docker image (Multi-stage with cleanup)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
        # Optimize build
        provenance: false
        sbom: false
        # Use max compression to reduce layer sizes
        outputs: type=registry,compression=gzip,compression-level=9
          
    - name: Clean up build cache
      if: always()
      run: |
        echo "🧹 Cleaning up build artifacts..."
        docker system prune -af --volumes || true
        docker builder prune -af || true
        df -h
        
    - name: Test Docker image (lightweight)
      run: |
        echo "🧪 Quick Docker image test..."
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
        
        # Just test that image exists and basic structure
        docker pull $IMAGE_TAG
        docker run --rm --entrypoint="" $IMAGE_TAG ls -la /workspace/ || true
        docker run --rm --entrypoint="" $IMAGE_TAG python -c "print('✅ Container runs successfully')"
        
        echo "✅ Basic Docker image test passed"
        
    - name: Generate deployment summary
      run: |
        echo "## 🚀 AI-Avatarka Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Container Image:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | head -1 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Info" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform:** \`linux/amd64\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 RunPod Setup" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to RunPod Serverless" >> $GITHUB_STEP_SUMMARY
        echo "2. Create new endpoint" >> $GITHUB_STEP_SUMMARY
        echo "3. Use the container image above" >> $GITHUB_STEP_SUMMARY
        echo "4. Upload worker-config.json" >> $GITHUB_STEP_SUMMARY
        echo "5. Test with sample input!" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success()
    steps:
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities, just report
        
  deploy-notification:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: success() && github.ref == 'refs/heads/main'
    steps:
    - name: Notify successful deployment
      run: |
        echo "🎉 AI-Avatarka deployment completed successfully!"
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Ready for RunPod serverless deployment!"